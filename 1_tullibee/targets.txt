Class, Method, Line, LineContent, Observation, Diagnosis, Action

com.ib.client.EReader, run, 97, "if (stopRequested) {",
every call to run() results in NPE on variable of type DataInputStream,  Unable to create (non-null) DataInputStream, added new object

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123"));
      }

com.ib.client.EWrapper, stopRequested, 72, "stopRequested()",
every call to run() results in NPE on variable of type EWrapper, Unable to create (non-null) EWrapper, added new object


      public static EWrapper eWrapperOne() { return new ...}

com.ib.client.EReader, readStr, 902, "if (c == 0) {", every call to
readStr(DataInputStream) raises java.io.Exception captured at EReader.run:102, DataInputStream object with invalid data, modified string 

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123\0"));
      }


com.ib.client.EReader, processMsg, 114, "case TICK_PRICE: {", every
call to processMsg(123) raises com.ib.client.EException captured at EReader.run:102, DataInputStream with invalid data, modified string

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("1\0"));
      }

com.ib.client.EReader, processMsg, 123, "int canAutoExecute = 0;",
every call to processMsg(1) raises java.io.Exception captured at EReader.run:102, DataInputStream with invalid data, modified string

                      
      public static DataInputStream disOne() {
        // Expressing these \0s in a single string does not work. It thinks "\03" is the string "\3" or something.
        String all = "1" + "\0" + "2" + "\0" + "3" + "\0" + "4" + "\0" + "2.97" + "\0";
        return new DataInputStream(new StringBufferInputStream(all));
      }
com.ib.client.OrderState, equals, 59, "if (this == other)",
every call to equals never satisfies the condition, other is never equals, assigned other = this

	public static OrderState equalsTwo() throws Exception {
		Constructor<OrderState> constructor;
		constructor = OrderState.class.getConstructor(String.class, String.class, String.class, String.class, Object.class, Object.class, Object.class, String.class, String.class);
		OrderState orderState = (OrderState) constructor.newInstance("status", "initMargin", "maintMargin",
			"equityWithLoan", 0.5, 0.25,
			0.75, "commissionCurrency", "warningText");
			
		orderState.equals(orderState);
		return orderState;
	}

com.ib.client.OrderState, equals, 67, "if (m_commission != state.m_commission ||",
every call to equals never satisfies the condition, m_commission is ever equals to state.m_commission, assigned m_commission != state.m_commission

	public static OrderState equalsOne() throws Exception {
		Constructor<OrderState> constructorOne, constructorTwo;
		constructorOne = OrderState.class.getConstructor(String.class, String.class, String.class, String.class, Object.class, Object.class, Object.class, String.class, String.class);
		constructorTwo = OrderState.class.getConstructor();
		OrderState orderStateOne = (OrderState) constructorOne.newInstance("status", "initMargin", "maintMargin",
			"equityWithLoan", 0.5, 0.25,
			0.75, "commissionCurrency", "warningText");
			
		constructorTwo = OrderState.class.getConstructor(String.class, String.class, String.class, String.class, Object.class, Object.class, Object.class, String.class, String.class);
		OrderState orderStateTwo = (OrderState) constructorTwo.newInstance("status", "initMargin", "maintMargin",
			"equityWithLoan", 0.53, 0.27,
			0.79, "commissionCurrency", "warningText");
	
		orderStateOne.equals(orderStateTwo);
		return orderStateOne;
	}

com.ib.client.OrderState, equals, 73, "if (Util.StringCompare(m_status, state.m_status) != 0 ||",
every call to equals never satisfies the condition, m_status is ever equals to state.m_status, assigned m_status != state.m_status

	public static OrderState equalsThree() throws Exception {
		Constructor<OrderState> constructorOne, constructorTwo;
		constructorOne = OrderState.class.getConstructor(String.class, String.class, String.class, String.class, Object.class, Object.class, Object.class, String.class, String.class);
		OrderState orderStateOne = (OrderState) constructorOne.newInstance("status1", "initMargin", "maintMargin",
			"equityWithLoan", 0.5, 0.25,
			0.75, "commissionCurrency", "warningText");
			
		constructorTwo = OrderState.class.getConstructor(String.class, String.class, String.class, String.class, Object.class, Object.class, Object.class, String.class, String.class);
		OrderState orderStateTwo = (OrderState) constructorTwo.newInstance("status2", "initMargin", "maintMargin",
			"equityWithLoan", 0.5, 0.25,
			0.75, "commissionCurrency", "warningText");
		
		orderStateOne.equals(orderStateTwo);
		return orderStateOne;
	}

