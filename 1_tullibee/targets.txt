Class, Method, Line, LineContent, Observation, Diagnosis, Action

com.ib.client.EReader, run, 97, "if (stopRequested) {",
every call to run() results in NPE on variable of type DataInputStream,  Unable to create (non-null) DataInputStream, added new object

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123"));
      }

com.ib.client.EWrapper, stopRequested, 72, "stopRequested()",
every call to run() results in NPE on variable of type EWrapper, Unable to create (non-null) EWrapper, added new object


      public static EWrapper eWrapperOne() { return new ...}

com.ib.client.EReader, readStr, 902, "if (c == 0) {", every call to
readStr(DataInputStream) raises java.io.Exception captured at EReader.run:102, DataInputStream object with invalid data, modified string 

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("123\0"));
      }


com.ib.client.EReader, processMsg, 114, "case TICK_PRICE: {", every
call to processMsg(123) raises com.ib.client.EException captured at EReader.run:102, DataInputStream with invalid data, modified string

      public static DataInputStream disOne() {
        return new DataInputStream(new StringBufferInputStream("1\0"));
      }

com.ib.client.EReader, processMsg, 123, "int canAutoExecute = 0;",
every call to processMsg(1) raises java.io.Exception captured at EReader.run:102, DataInputStream with invalid data, modified string

                      
      public static DataInputStream disOne() {
        // Expressing these \0s in a single string does not work. It thinks "\03" is the string "\3" or something.
        String all = "1" + "\0" + "2" + "\0" + "3" + "\0" + "4" + "\0" + "2.97" + "\0";
        return new DataInputStream(new StringBufferInputStream(all));
      }

com.ib.client.ComboLeg, equals, 69, "else if ( p_other == null )",
this case is never called due to the type of entry passed. Then pass the value null as an input parameter

public static ComboLeg comboIsNull () {
    	ComboLeg comboLeg = new ComboLeg();
    	comboLeg.equals(null);
    	
    	return comboLeg;
    }

com.ib.client.ComboLeg, equals, 75, "if (m_conId != l_theOther.m_conId ||",
this case is never called due to the type of entry passed. Create a new ComboLeg with a different m_conId value and pass it as an input parameter

public static ComboLeg comboNotEqualsConId () {
    	ComboLeg comboLeg = new ComboLeg();
    	comboLeg.m_conId = 3;
    	ComboLeg comboLegOne = new ComboLeg();
    	comboLegOne.m_conId = 2;
    	comboLeg.equals(comboLegOne); 
    	
    	return comboLeg;
    }

com.ib.client.ComboLeg, equals, 76, "if (m_ratio != l_theOther.m_ratio ||",
this case is never called due to the type of entry passed. Create a new ComboLeg with a different m_ratio value and pass it as an input parameter

public static ComboLeg comboNotEqualsRatio () {
    	ComboLeg comboLeg = new ComboLeg();
    	comboLeg.m_ratio = 3;
    	ComboLeg comboLegOne = new ComboLeg();
    	comboLegOne.m_ratio = 2;
    	comboLeg.equals(comboLegOne); 
    	
    	return comboLeg;
    }

com.ib.client.ComboLeg, equals, 77, "if (m_openClose != l_theOther.m_openClose ||",
this case is never called due to the type of entry passed. Create a new ComboLeg with a different m_openClose value and pass it as an input parameter

public static ComboLeg comboNotEqualsOpenClose () {
    	ComboLeg comboLeg = new ComboLeg();
    	comboLeg.m_openClose = 1;
    	ComboLeg comboLegOne = new ComboLeg();
    	comboLegOne.m_openClose = 2;
    	comboLeg.equals(comboLegOne); 
    	
    	return comboLeg;
    }

com.ib.client.ComboLeg, equals, 78, "if (m_shortSaleSlot != l_theOther.m_shortSaleSlot)",
this case is never called due to the type of entry passed. Create a new ComboLeg with a different m_shortSaleSlot value and pass it as an input parameter

public static ComboLeg comboNotEqualsSaleSlot () {
    	ComboLeg comboLeg = new ComboLeg();
    	comboLeg.m_shortSaleSlot = 1;
    	ComboLeg comboLegOne = new ComboLeg();
    	comboLegOne.m_shortSaleSlot = 2;
    	comboLeg.equals(comboLegOne); 
    	
    	return comboLeg;
    }